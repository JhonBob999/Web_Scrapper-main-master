from core.exploit_loader import load_all_exploits, import_exploit_function
from utils.config_loader import load_config
from PyQt5.QtWidgets import QMessageBox
from core.exploit_logger import log_exploit_result

config = load_config()

class ExploitController:
    def __init__(self, ui):
        self.ui = ui
        self.exploit_list = []
        self.setup_connections()
        self.load_exploits()

    def setup_connections(self):
        self.ui.listWidgetExploits.itemClicked.connect(self.on_exploit_selected)
        self.ui.btnCheck.clicked.connect(self.on_check_clicked)
        self.ui.btnRun.clicked.connect(self.on_run_clicked)
        self.ui.btnClear.clicked.connect(self.clear_metadata)

    def load_exploits(self):
        self.exploit_list = load_all_exploits()
        self.ui.listWidgetExploits.clear()
        for exploit in self.exploit_list:
            name = f"{exploit['id']}: {exploit['name']}"
            self.ui.listWidgetExploits.addItem(name)

    def get_selected_exploit(self):
        current_row = self.ui.listWidgetExploits.currentRow()
        if current_row < 0 or current_row >= len(self.exploit_list):
            return None
        return self.exploit_list[current_row]

    def on_exploit_selected(self):
        exploit = self.get_selected_exploit()
        if exploit:
            text = (
                f"ID: {exploit['id']}\n"
                f"Name: {exploit['name']}\n"
                f"Risk: {exploit['risk']}\n"
                f"Type: {exploit['type']}\n"
                f"Description: {exploit['description']}\n"
                f"Tested: {', '.join(exploit['tested_on'])}"
            )
            self.ui.txtExploitMeta.setPlainText(text)

    def on_check_clicked(self):
        exploit = self.get_selected_exploit()
        target = self.ui.lineEditTarget.text()
        if exploit:
            check_func = import_exploit_function(exploit["folder"], "check_vulnerability.py", "check_vulnerability")
            if check_func:
                result = check_func(target)
                self.ui.txtExploitMeta.append(f"\n[Check] Target {target} â†’ {'Vulnerable' if result else 'Not Vulnerable'}")

    def on_run_clicked(self):
        if not config.get("dev_mode", False):
            QMessageBox.warning(None, "Blocked", "Exploit run disabled in production mode.")
            return
        exploit = self.get_selected_exploit()
        target = self.ui.lineEditTarget.text()
        if exploit:
            run_func = import_exploit_function(exploit["folder"], "run_exploit.py", "run_exploit")
            if run_func:
                output = run_func(target)
                self.ui.txtExploitMeta.append(f"\n[Exploit] {output}")
                
                log_exploit_result(
                    exploit_id=exploit["id"],
                    target=target,
                    status="success",
                    output=output
                )

    def clear_metadata(self):
        self.ui.txtExploitMeta.clear()
        self.ui.lineEditTarget.clear()
