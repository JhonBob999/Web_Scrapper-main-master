# core/session_service.py

import os
import json
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
SESSIONS_DIR = "sessions"
RESULTS_DIR = "results"

os.makedirs(SESSIONS_DIR, exist_ok=True)
os.makedirs(RESULTS_DIR, exist_ok=True)

# ========= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ (–±—ã–ª–∏ –≤ session_manager.py) =========

def generate_session_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    now = datetime.now().strftime("%Y-%m-%d_%H-%M")
    return f"session_{now}"

def save_session(session_name, tasks):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é.
    :param session_name: –∏–º—è —Å–µ—Å—Å–∏–∏
    :param tasks: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–¥–∞—á
    :return: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    """
    session_data = {
        "session_name": session_name,
        "datetime": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "tasks": []
    }

    result_dir = os.path.join(RESULTS_DIR, session_name)
    os.makedirs(result_dir, exist_ok=True)

    for i, task in enumerate(tasks):
        result_path = None
        if task.get("results"):
            result_path = os.path.join(result_dir, f"task_{i}.json")
            with open(result_path, "w", encoding="utf-8") as f:
                json.dump(task["results"], f, indent=4, ensure_ascii=False)

        session_data["tasks"].append({
            "url": task.get("url", ""),
            "selector": task.get("selector", ""),
            "method": task.get("method", "CSS"),
            "status": task.get("status", "–û–∂–∏–¥–∞–µ—Ç"),
            "params": task.get("params", {}),
            "cookies_file": task.get("cookies_file", ""),
            "results_path": result_path,
            "log_path": task.get("log_path", ""),
            "timer_interval": task.get("timer_interval", 0),
            "last_run": task.get("last_run", "")
        })

    path = os.path.join(SESSIONS_DIR, f"{session_name}.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(session_data, f, indent=4, ensure_ascii=False)

    return path

def load_session(path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –∫ JSON-—Ñ–∞–π–ª—É."""
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def list_sessions():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–∏–º—è —Ñ–∞–π–ª–∞, –¥–∞—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á).
    :return: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–π
    """
    sessions = []
    for file in sorted(os.listdir(SESSIONS_DIR), reverse=True):
        if file.endswith(".json"):
            path = os.path.join(SESSIONS_DIR, file)
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
                sessions.append({
                    "file": file,
                    "path": path,
                    "session_name": data.get("session_name", file),
                    "datetime": data.get("datetime", ""),
                    "task_count": len(data.get("tasks", []))
                })
    return sessions

def delete_session(path):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
    if os.path.exists(path):
        os.remove(path)
        return True
    return False

def get_cookie_file_name(url):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ cookies –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è get_cookie_path –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –º–æ–¥—É–ª–µ cookie_manager.
    """
    from core.cookie_manager import get_cookie_path
    return os.path.basename(get_cookie_path(url))

# ========= –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –≤ UI (–±—ã–ª –≤ session_controller.py) =========

class SessionController:
    """
    –ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å UI.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –≤—ã—à–µ.
    """

    def __init__(self, table_controller, add_task_callback, task_params, task_results, task_intervals):
        self.table = table_controller
        self.add_task = add_task_callback
        self.task_params = task_params
        self.task_results = task_results
        self.task_intervals = task_intervals

    def save_session(self, session_name):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é, —Å–æ–±–∏—Ä–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
        :param session_name: –∏–º—è —Å–µ—Å—Å–∏–∏
        :return: –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
        """
        tasks = []

        for row in range(self.table.table.rowCount()):
            task = self.table.get_task_data(row)
            params = self.task_params.get(row, {})
            results = self.task_results.get(row, [])
            timer_interval = self.task_intervals.get(row, 0)
            cookies_file = get_cookie_file_name(task["url"])

            tasks.append({
                "url": task["url"],
                "selector": task["selector"],
                "method": task["method"],
                "status": task["status"],
                "params": params,
                "cookies_file": cookies_file,
                "results": results,
                "timer_interval": timer_interval,
                "last_run": task["last_run"],
            })

        return save_session(session_name, tasks)

    def restore_session(self, session_data):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑ JSON.
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
        :param session_data: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Å–ª–æ–≤–∞—Ä—å)
        """
        from PyQt5.QtWidgets import QTableWidgetItem

        self.clear_all_tasks()

        for i, task in enumerate(session_data.get("tasks", [])):
            self.add_task(task["url"], task["selector"], task["method"], task["status"])

            self.task_params[i] = task.get("params", {})
            self.task_results[i] = {
                "url": task["url"],
                "status": task["status"],
                "results": task.get("results", []),
                "message": task.get("log_path", ""),
                "last_run": task.get("last_run", "")
            }
            self.task_intervals[i] = task.get("timer_interval", 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "Last Run"
            self.table.set_last_run(i, task.get("last_run", ""))

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tooltip –¥–ª—è cookies
            self.table.table.setItem(i, 7, QTableWidgetItem(task.get("cookies_file", "")))

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.table.table.setItem(i, 8, QTableWidgetItem("üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å"))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–π–º–µ—Ä–∞
            timer_text = f"{self.task_intervals[i]} —Å–µ–∫" if self.task_intervals[i] else "‚Äì"
            self.table.table.setItem(i, 9, QTableWidgetItem(timer_text))

        self.table.table.resizeColumnsToContents()

    def clear_all_tasks(self):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–∞–º–∏.
        """
        self.table.table.setRowCount(0)
        self.task_params.clear()
        self.task_results.clear()
        self.task_intervals.clear()
